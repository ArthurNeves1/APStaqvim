package taqvim;


import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.sql.ResultSet;


public class DAOPessoa {
private ConexaoBD conexao;
private boolean login = false;



	public DAOPessoa() {
		// cria o objeto para conexão com banco, porém não o inicializa
		// a conexão deve ser aberta e, consequentemente, fechada durante o envio de comandos
		// ao banco
		this.conexao = new ConexaoBD();
	}
	
	public void criarPessoa(Disciplina User) {
		// abrindo a conexão com o BD
		conexao.conectar();

		try {
			// usando um PreparedStatement com valores externos como parâmetros (representados pelo '?')
			PreparedStatement pst = conexao.getConexao().prepareStatement("insert into \"taqvim\".Disciplina(acr,prof) values(?,?)");
			// os métodos set devem ser escolhidos de acordo com os tipos dos atributos da entidade que está
			// sendo acessada. A sequência é determinada por índices, iniciando do valor 1.
			
			pst.setString(1,User.getAcr());
			pst.setString(2, User.getProf());
			
			
			
			
			
			// solicitação da execução da query, após seu preparo
			pst.execute();
		} catch (SQLException e) {
			System.out.println("Erro: " + e.getMessage());
		} finally {
			// o banco deve ser desconectado, mesmo quando a exceção é lançada
			conexao.desconectar();
		}
          
		
	}
        public void criarATV(Atividade atividade) {
		// abrindo a conexão com o BD
		conexao.conectar();

		try {
			// usando um PreparedStatement com valores externos como parâmetros (representados pelo '?')
			PreparedStatement pst = conexao.getConexao().prepareStatement("insert into \"taqvim\".atividade(nome,descr,stts,tag,cod) values(?,?,?,?,?)");
			// os métodos set devem ser escolhidos de acordo com os tipos dos atributos da entidade que está
			// sendo acessada. A sequência é determinada por índices, iniciando do valor 1.
			
			pst.setString(1,atividade.getNome());
			pst.setString(2,atividade.getDesc());
                        pst.setString(3,atividade.getStatus());
                        pst.setString(4,atividade.getTag());
                        pst.setInt(5,atividade.getCod());
			
			
			
			
			
			// solicitação da execução da query, após seu preparo
			pst.execute();
		} catch (SQLException e) {
			System.out.println("Erro: " + e.getMessage());
		} finally {
			// o banco deve ser desconectado, mesmo quando a exceção é lançada
			conexao.desconectar();
		}
          
		
	}
	public void excluiratv(int cod) {
		// abrindo a conexão com o BD
		conexao.conectar();
		
		try {
			PreparedStatement stm = conexao.getConexao().prepareStatement("delete from \"taqvim\".atividade where cod = \'" + cod + "\'");
			stm.execute();
		} catch (SQLException e) {
			System.out.println("Erro: " + e.getMessage());
		} finally {
			// o banco deve ser desconectado, mesmo quando a exceção é lançada
			conexao.desconectar();
		}
	}
        public void excluirDisc(String acr) {
		// abrindo a conexão com o BD
		conexao.conectar();
		
		try {
			PreparedStatement stm = conexao.getConexao().prepareStatement("delete from \"taqvim\".disciplina where acr = \'" + acr + "\'");
			stm.execute();
		} catch (SQLException e) {
			System.out.println("Erro: " + e.getMessage());
		} finally {
			// o banco deve ser desconectado, mesmo quando a exceção é lançada
			conexao.desconectar();
		}
	}
        public Atividade buscaratividade(int codr) {
		// abrindo a conexão com o BD
		conexao.conectar();
		// busca utilizando o método de consulta do objeto ConexaoBD
		ResultSet resultado = conexao.executarSQL("select * from \"taqvim\".atividade where cod = \'" + codr + "\'");
		Atividade Atv = new Atividade(null, null, null, null, codr);
	
		try {
			resultado.next();
			// os métodos get devem ser escolhidos de acordo com os tipos dos atributos da entidade que está
			// sendo acessada
			codr = resultado.getInt("cod");
                        String nome = resultado.getString("nome");
                        String descr = resultado.getString("descr");
                        String stts = resultado.getString("stts");
                        String tag = resultado.getString("tag");
                       
                        Atv.setCod(codr);
                        Atv.setNome(nome);
                        Atv.setDesc(descr);
                        Atv.setStatus(stts);
                        Atv.setTag(tag);
                       
			
			
			
		} catch (SQLException e) {
			System.out.println("Erro: " + e.getMessage());
		} finally {
			// o banco deve ser desconectado, mesmo quando a exceção é lançada
			conexao.desconectar();
		}
		return Atv;
	}
        public ArrayList<Atividade> verTodos() {
		ArrayList<Atividade> pessoas = new ArrayList<>();
		
		// abrindo a conexão com o BD
		conexao.conectar();
		ResultSet resultado = conexao.executarSQL("select * from \"taqvim\".atividade");
		
		try {
			// para iterar sobre os resultados de uma consulta, deve-se utilizar o método next()
			while (resultado.next()) {
				String nome = resultado.getString("nome");
				String descr = resultado.getString("descr");
				String stts = resultado.getString("stts");
				String tag = resultado.getString("tag");
				int cod = resultado.getInt("cod");
				
				pessoas.add(new Atividade(nome,descr,stts, tag, cod));
			}
		} catch (SQLException e) {
			System.out.println("Erro: " + e.getMessage());
		} finally {
			// o banco deve ser desconectado, mesmo quando a exceção é lançada
			conexao.desconectar();
		}
		return pessoas;
	}
        public void editarAtv(int cod, String sttss) {
		// abrindo a conexão com o BD
		conexao.conectar();
		
		try {
			PreparedStatement stm = conexao.getConexao().prepareStatement("update \"taqvim\".atividade set stts = ?"
					+ "where cod = \'" + cod + "\'");
			stm.setString(1, sttss);
			stm.execute();
		} catch (SQLException e) {
			System.out.println("Erro: " + e.getMessage());
		} finally {
			// o banco deve ser desconectado, mesmo quando a exceção é lançada
			conexao.desconectar();
		}
	}

	
	}
